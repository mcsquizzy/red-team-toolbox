#!/bin/bash
# Gather Vulnerability Information

####################
# Global variables #
####################

DEPENDENCIES="nmap nikto sqlmap"

myVULNFILE="output/vuln-infos/vuln-findings.txt"
myVULNFILEXML="../src/vuln-findings.xml"
myWEBFILE="output/vuln-infos/web-findings.txt"
#myINJECTIONFILE="output/web-injection-findings.txt"


#############
# Functions #
#############

function fuNmapVulnersScan {
  # Note that it is already included into the standard nmap NSE library.
  # it only works with -sV flag.
  fuTITLE "Nmap vulnerability scan with vulners script of $1 and port $2 ..."
  nmap -Pn -sV --script vulners -oN $myVULNFILE -oX $myVULNFILEXML $SPOOFINGPARAMETERS $1 -p$2
}

function fuNiktoScan {
  fuTITLE "Scanning webserver $1 for vulnerabilities ..."
  nikto -h $1 -port $2 $3 -o $myVULNFILE
}

#function fuSqlmapScan {
#  fuTITLE "Scanning for injection vulnerabilities of webserver $1 ..."
#  sqlmap -u $1 --batch --crawl=4 --output-dir=output
#}


################################
# Installation of Dependencies #
################################

if [ "$IAMROOT" ] && [ "$INET" ]; then
  fuGET_DEPS
else
  fuMESSAGE "Installation of dependencies skipped."
fi


###########################
# Create output directory #
###########################

if [ ! -d "output/" ]; then
  fuINFO "Creating \"./output/vuln-infos\" directory"
  mkdir output
  mkdir output/vuln-infos && echo "[ OK ]"
  echo
else
  fuINFO "Creating \"./output/vuln-infos\" directory"
  mkdir output/vuln-infos && echo "[ OK ]"
  echo
fi


##########################
# Vulnerability Scanning #
##########################

# nmap 
# vulners script
if [ "$IP" != "" ] && [ "$TCPPORT" != "" ] && [ "$UDPPORT" != "" ]; then
  fuNmapVulnersScan $IP $TCPPORT,$UDPPORT

elif [ "$IP" != "" ] && [ "$TCPPORT" != "" ] && [ "$UDPPORT" == "" ]; then
  fuNmapVulnersScan $IP $TCPPORT

elif [ "$IP" != "" ] && [ "$TCPPORT" == "" ] && [ "$UDPPORT" != "" ]; then
  fuNmapVulnersScan $IP $UDPPORT

elif [ "$IP" != "" ] && [ "$TCPPORT" == "" ] && [ "$UDPPORT" == "" ] && [ -s targetPort.txt ]; then
  # change newlines to comma separated
  fuNmapVulnersScan $IP $(tr '\n' , <targetPort.txt)
fi

# nikto
# if ports 80 and 433 open...
if [ "$IP" != "" ] && ( [ "$TCPPORT" == "443" ] || grep -q -w "443" targetPort.txt ); then
  fuNiktoScan $IP 443 -ssl
  
elif [ "$DOMAIN" != "" ] && ( [ "$TCPPORT" == "443" ] || grep -q -w "443" targetPort.txt ); then
  fuNiktoScan $DOMAIN 443 -ssl

elif [ "$IP" != "" ] && ( [ "$TCPPORT" == "80" ] || grep -q -w "80" targetPort.txt ); then
  fuNiktoScan $IP 80
  
elif [ "$DOMAIN" != "" ] && ( [ "$TCPPORT" == "80" ] || grep -q -w "80" targetPort.txt ); then
  fuNiktoScan $DOMAIN 80
fi


############################
# Web Application Analysis #
############################

# whatweb
if [ "$IP" != "" ] && ( [ "$TCPPORT" == "80" ] || [ "$TCPPORT" == "443" ] || grep -q -w "80" targetPort.txt || grep -q -w "443" targetPort.txt ); then
  fuTITLE "Scan $IP and recognise web technologies ..."
  whatweb $IP -a 3 -v -q --no-errors --color=never | tee $myWEBFILE

elif [ "$DOMAIN" != "" ] && ( [ "$TCPPORT" == "80" ] || [ "$TCPPORT" == "443" ] || grep -q -w "80" targetPort.txt || grep -q -w "443" targetPort.txt ); then
  fuTITLE "Scan $DOMAIN and recognise web technologies ..."
  whatweb $DOMAIN -a 3 -v -q --no-errors --color=never | tee $myWEBFILE
fi

# if above condition shows no results:
if [ "$IP" != "" ] && [ ! -s "$myWEBFILE" ]; then
  fuTITLE "Scan $IP and recognise web technologies ..."
  whatweb $IP -a 3 -v -q --no-errors --color=never | tee $myWEBFILE
  # remove myWEBFILE if empty
  if [ ! -s "$myWEBFILE" ]; then rm $myWEBFILE; fi

elif [ "$DOMAIN" != "" ] && [ ! -s "$myWEBFILE" ]; then
  fuTITLE "Scan $DOMAIN and recognise web technologies ..."
  whatweb $DOMAIN -a 3 -v -q --no-errors --color=never | tee $myWEBFILE
  # remove myWEBFILE if empty
  if [ ! -s "$myWEBFILE" ]; then rm $myWEBFILE; fi
fi


##################################
# Web Application Analysis - CMS #
##################################

# wpscan
if [ "$IP" != "" ] && grep -qi "WordPress" $myWEBFILE 2>/dev/null; then
  fuTITLE "WordPress Security Scan of $IP ..."
  if [ "$TCPPORT" == "443" ] || ( grep -q -w "443" targetPort.txt && grep -q -w -v "80" targetPort.txt ); then
    wpscan --url https://$IP | tee -a $myWEBFILE
  else
    wpscan --url $IP | tee -a $myWEBFILE
  fi

elif [ "$DOMAIN" != "" ] && grep -qi "WordPress" $myWEBFILE 2>/dev/null; then
  fuTITLE "WordPress Security Scan of $DOMAIN ..."
  if [ "$TCPPORT" == "443" ] || ( grep -q -w "443" targetPort.txt && grep -q -w -v "80" targetPort.txt ); then
    wpscan --url https://$DOMAIN | tee -a $myWEBFILE
  else
    wpscan --url $DOMAIN | tee -a $myWEBFILE
  fi
fi

# joomscan https://github.com/OWASP/joomscan
if [ "$IP" != "" ] && grep -qi "Joomla" $myWEBFILE 2>/dev/null; then
  fuTITLE "Joomla Security Scan of $IP ..."
  if command -v perl; then
    fuINFO "Download and install joomscan ..."
    git clone https://github.com/rezasp/joomscan.git 2>/dev/null
    if [ "$TCPPORT" == "443" ] || ( grep -q -w "443" targetPort.txt && grep -q -w -v "80" targetPort.txt ); then
      cd joomscan && perl joomscan.pl -u https://$IP --no-report | tee -a $myWEBFILE && cd ..
    else
      cd joomscan && perl joomscan.pl -u $IP --no-report | tee -a $myWEBFILE && cd ..
    fi
  else
    fuERROR "No perl installed on this system. Joomscan skipped."
  fi

elif [ "$DOMAIN" != "" ] && grep -qi "Joomla" $myWEBFILE 2>/dev/null; then
  fuTITLE "Joomla Security Scan of $DOMAIN ..."
  if command -v perl; then
    fuINFO "Download and install joomscan ..."
    git clone https://github.com/rezasp/joomscan.git 2>/dev/null
    if [ "$TCPPORT" == "443" ] || ( grep -q -w "443" targetPort.txt && grep -q -w -v "80" targetPort.txt ); then
      cd joomscan && perl joomscan.pl -u https://$DOMAIN --no-report | tee -a $myWEBFILE && cd ..
    else
      cd joomscan && perl joomscan.pl -u $DOMAIN --no-report | tee -a $myWEBFILE && cd ..
    fi
  else
    fuERROR "No perl installed on this system. Joomscan skipped."
  fi
fi


# sqlmap
#if [ "$IP" != "" ] && ([ "$TCPPORT" == "443" ] || grep -q -w 443 "targetPort.txt"); then
#  fuSqlmapScan https://$IP
#elif [ "$DOMAIN" != "" ] && ([ "$TCPPORT" == "443" ] || grep -q -w 443 "targetPort.txt"); then
#  fuSqlmapScan https://$DOMAIN
#fi

#if [ "$IP" != "" ] && ([ "$TCPPORT" == "80" ] || grep -q -w 80 "targetPort.txt"); then
#  fuSqlmapScan http://$IP
#elif [ "$DOMAIN" != "" ] && ([ "$TCPPORT" == "80" ] || grep -q -w 80 "targetPort.txt"); then
#  fuSqlmapScan http://$DOMAIN
#fi


# WMAP needed?
# https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/


#####################
# Summarize results #
#####################

fuTITLE "Findings in following files:"

if [ -s "$myVULNFILE" ] && grep -q -i "Host is up" $myVULNFILE; then
  fuRESULT "Vulnerabilities found in: $myVULNFILE"
elif grep -q -i "0 hosts up" $myVULNFILE; then
  fuERROR "Target host is probably down!"
fi
if [ -s "$myWEBFILE" ]; then
  fuRESULT "Webserver and -services information: $myWEBFILE"
fi

if [ ! -s "$myVULNFILE" ] && [ ! -s "$myWEBFILE" ]; then 
  fuERROR "No vulnerabilites found."
fi
echo