#!/bin/bash
# Gather Vulnerability Information

####################
# Global variables #
####################

DEPENDENCIES="nmap nikto sqlmap"

myVULNFILE="output/vuln-findings.txt"
myVULNFILEXML="../src/vuln-findings.xml"
myWEBFILE="output/web-findings.txt"
#myINJECTIONFILE="output/web-injection-findings.txt"

#############
# Functions #
#############

function fuNmapVulnersScan {
  # Note that it is already included into the standard nmap NSE library.
  # it only works with -sV flag.
  fuTITLE "Nmap vulnerability scan with vulners script of $1 and port $2 ..."
  nmap -Pn -sV --script vulners -oN $myVULNFILE -oX $myVULNFILEXML $SPOOFINGPARAMETERS $1 -p$2
}

function fuNiktoScan {
  fuTITLE "Scanning webserver $1 for vulnerabilities ..."
  nikto -h $1 -port $2 $3 -o $myVULNFILE
}

#function fuSqlmapScan {
#  fuTITLE "Scanning for injection vulnerabilities of webserver $1 ..."
#  sqlmap -u $1 --batch --crawl=4 --output-dir=output
#}

################################
# Installation of Dependencies #
################################

#fuGET_DEPS

###########################
# Create output directory #
###########################

if [ ! -d "output/" ]; then
  fuINFO "creating \"output/\" directory"
  mkdir output && echo "[ OK ]"
fi

##########################
# Vulnerability Scanning #
##########################

# nmap 
# vulners script
if [ "$IP" != "" ] && [ "$TCPPORT" != "" ] && [ "$UDPPORT" != "" ]; then
  fuNmapVulnersScan $IP $TCPPORT,$UDPPORT

elif [ "$IP" != "" ] && [ "$TCPPORT" != "" ] && [ "$UDPPORT" == "" ]; then
  fuNmapVulnersScan $IP $TCPPORT

elif [ "$IP" != "" ] && [ "$TCPPORT" == "" ] && [ "$UDPPORT" != "" ]; then
  fuNmapVulnersScan $IP $UDPPORT

elif [ "$IP" != "" ] && [ "$TCPPORT" == "" ] && [ "$UDPPORT" == "" ] && [ -s targetPort.txt ]; then
  # change newlines to comma separated
  fuNmapVulnersScan $IP $(tr '\n' , <targetPort.txt)
fi

# nikto
# if ports 80 and 433 open...
if [ "$IP" != "" ] && ( grep -q -w 443 "targetPort.txt" || [ "$TCPPORT" == "443" ] ); then
  fuNiktoScan $IP 443 -ssl
  
elif [ "$DOMAIN" != "" ] && ( grep -q -w 443 "targetPort.txt" || [ "$TCPPORT" == "443" ] ); then
  fuNiktoScan $DOMAIN 443 -ssl

elif [ "$IP" != "" ] && ( grep -q -w 80 "targetPort.txt" || [ "$TCPPORT" == "80" ] ); then
  fuNiktoScan $IP 80
  
elif [ "$DOMAIN" != "" ] && ( grep -q -w 80 "targetPort.txt" || [ "$TCPPORT" == "80" ] ); then
  fuNiktoScan $DOMAIN 80
fi

############################
# Web Application Analysis #
############################

# whatweb
if [ "$IP" != "" ] && ([ "$TCPPORT" == "80" ] || [ "$TCPPORT" == "443" ] || grep -q -w 80 "targetPort.txt" || grep -q -w 443 "targetPort.txt"); then
  fuTITLE "Scan $IP and recognise web technologies ..."
  whatweb $IP -a 3 -v -q --no-errors --color=never | tee $myWEBFILE

elif [ "$DOMAIN" != "" ] && ([ "$TCPPORT" == "80" ] || [ "$TCPPORT" == "443" ] || grep -q -w 80 "targetPort.txt" || grep -q -w 443 "targetPort.txt"); then
  fuTITLE "Scan $DOMAIN and recognise web technologies ..."
  whatweb $DOMAIN -a 3 -v -q --no-errors --color=never | tee $myWEBFILE
fi

# if above condition shows no results:
if [ "$IP" != "" ] && [ ! -s "$myWEBFILE" ]; then
  fuTITLE "Scan $IP and recognise web technologies ..."
  whatweb $IP -a 3 -v -q --no-errors --color=never | tee $myWEBFILE
  # remove myWEBFILE if empty
  if [ ! -s "$myWEBFILE" ]; then rm $myWEBFILE; fi
elif [ "$DOMAIN" != "" ] && [ ! -s "$myWEBFILE" ]; then
  fuTITLE "Scan $DOMAIN and recognise web technologies ..."
  whatweb $DOMAIN -a 3 -v -q --no-errors --color=never | tee $myWEBFILE
  # remove myWEBFILE if empty
  if [ ! -s "$myWEBFILE" ]; then rm $myWEBFILE; fi
fi

# CMS 
# wpscan
if [ "$IP" != "" ] && grep -q WordPress "$myWEBFILE" 2>/dev/null; then
  fuTITLE "WordPress Security Scan of $IP ..."
  wpscan --url $IP | tee -a $myWEBFILE
elif [ "$DOMAIN" != "" ] && grep -q WordPress "$myWEBFILE" 2>/dev/null; then
  fuTITLE "WordPress Security Scan of $DOMAIN ..."
  wpscan --url $DOMAIN | tee -a $myWEBFILE
fi

# cmsmap https://github.com/Dionach/CMSmap


# joomscan https://github.com/OWASP/joomscan


# droopescan https://github.com/SamJoan/droopescan



# sqlmap
#if [ "$IP" != "" ] && ([ "$TCPPORT" == "443" ] || grep -q -w 443 "targetPort.txt"); then
#  fuSqlmapScan https://$IP
#elif [ "$DOMAIN" != "" ] && ([ "$TCPPORT" == "443" ] || grep -q -w 443 "targetPort.txt"); then
#  fuSqlmapScan https://$DOMAIN
#fi

#if [ "$IP" != "" ] && ([ "$TCPPORT" == "80" ] || grep -q -w 80 "targetPort.txt"); then
#  fuSqlmapScan http://$IP
#elif [ "$DOMAIN" != "" ] && ([ "$TCPPORT" == "80" ] || grep -q -w 80 "targetPort.txt"); then
#  fuSqlmapScan http://$DOMAIN
#fi


# WMAP needed?
# https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/


#####################
# Summarize results #
#####################

fuTITLE "Findings in following files:"
if [ -s "$myVULNFILE" ] && grep -q -i "Host is up" $myVULNFILE; then
  fuRESULT "Vulnerabilities found in: $myVULNFILE"
elif grep -q -i "0 hosts up" $myVULNFILE; then
  fuERROR "Target host is probably down!"
fi
if [ -s "$myWEBFILE" ]; then
  fuRESULT "Webserver and -services information: $myWEBFILE"
fi
if [ ! -s "$myVULNFILE" ] && [ ! -s "$myWEBFILE" ]; then 
  fuERROR "No vulnerabilites found."
fi
echo