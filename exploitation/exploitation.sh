#!/bin/bash
# Exploitation

####################
# Global variables #
####################

DEPENDENCIES="toilet"

# colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC="\033[0m" # No Color
# bold
BRED='\033[1;31m'
BGREEN='\033[1;32m'
BYELLOW='\033[1;33m'
BBLUE='\033[1;34m'
# text
BOLD=$(tput bold)
NORMAL='\033[0;39m'


#############
# Functions #
#############

# Print banner
function print_banner {
  echo
  toilet -tf standard $1 -F metal
  echo
}

function print_advisory {
  echo
  echo -e "${BYELLOW}Advisory: ${BBLUE}Use this script for educational purposes and/or for authorized penetration testing only. The author is not responsible for any misuse or damage caused by this script. Use at your own risk.$NC"
  echo
}

# Print title
function print_title {
  echo
  for i in $(seq 80); do
    echo -en "$BBLUE═$NC"
  done
  echo
  echo -e "$BGREEN $1 $NC"
  for i in $(seq 80); do
    echo -en "$BBLUE═$NC"
  done
  echo
}

# Print info line
function print_info {
  echo
  echo -e "$BBLUE════$BGREEN $1 $NC"
}

# Print error line
function print_error {
  echo
  echo -e "$BBLUE════$BRED $1 $NC"
}

# Print results line
function print_result {
  echo
  echo -e "$BBLUE════$BYELLOW $1 $NC"
}

# Print next steps line
function print_step {
  echo
  echo -e "$BBLUE[X]$NC $1 $NC"
}

# Print message line
function print_message {
  echo -e "$BBLUE----$NC $1 $NC"
}

# Print attention message line
function print_attention {
  echo -e "$BLUE----$YELLOW $1 $NC"
}

# Check for root permissions
function check_root {
print_info "Checking for root"
if ([ -f /usr/bin/id ] && [ "$(/usr/bin/id -u)" -eq "0" ]) || [ "`whoami 2>/dev/null`" = "root" ]; then
  IAMROOT="1"
  print_message "You are root"
  echo
else
  IAMROOT=""
  print_message "You are not root"
  echo
fi
}

# Check internet connection
function check_inet {
if wget -q --tries=10 --timeout=20 --spider http://google.com; then
  INET="1"
  print_message "Internet connection: $BGREEN[ OK ]$NC"
else
  INET=""
  print_message "Internet connection: $BRED[ NOT OK ]$NC"
fi
}

# Install dependencies
function install_deps {
  print_info "Upgrading packages"
  apt -y update
  print_info "Installing dependencies"
  apt -y install $DEPENDENCIES
}


####################################
# Check the command line arguments #
####################################

PASSED_ARGS=$@
if [ "$PASSED_ARGS" != "" ]; then
  while getopts "hc:" opt; do
    case "$opt" in
      h|\?)
        echo
        echo "Usage: $0 [-h] [-c]"
        echo
        echo "-c <Path to \"exploitation.conf\">"
        echo "  Use this to execute the exploitation script."
        echo "  A configuration example is available in \"exploitation/exploitation.conf.dist\"."
        echo
        exit;;
      c) myCONF_FILE=$OPTARG;;
      esac
  done
else
  echo "$0: no configuration file given. Try -h for help."
  echo
  exit
fi

# If a valid config file exists, load the configuration
if [ "$myCONF_FILE" == "" ]; then
  echo "$0: no configuration file given. Try -h for help."
  echo
  exit
fi
if [ -s "$myCONF_FILE" ] && [ "$myCONF_FILE" != "" ]; then
  if [ "$(head -n 1 $myCONF_FILE | grep -c "# exploitation")" == "1" ]; then
    source "$myCONF_FILE"
  else
	  echo "Aborting. Config file \"$myCONF_FILE\" not a exploitation configuration file."
    echo
    exit
fi
elif ! [ -s "$myCONF_FILE" ] && [ "$myCONF_FILE" != "" ]; then
  echo "Aborting. Config file \"$myCONF_FILE\" not found."
  echo
  exit
fi


#########################################
# Banner, Advisory, Check for root, ... #
#########################################

print_banner "EXPLOITATION"
print_advisory
check_root
sleep 1


################################
# Installation of Dependencies #
################################

if [ "$IAMROOT" ]; then
  check_inet
  if [ "$INET" ]; then
    install_deps
  else
    print_message "Installation of dependencies skipped."
  fi
else
  print_message "Not root. Installation of dependencies skipped."
fi


#########################################
# Check variables in configuration file #
#########################################

if [ "$BRUTEFORCE" ] || [ "$SEARCHEXPLOIT" ]; then
  print_title "Following parts will be executed:"
  if [ "$SEARCHEXPLOIT" ]; then
    print_message "Search Exploits"
  fi
  if [ "$BRUTEFORCE" ]; then
    print_message "Brute Force"
  fi
else
  print_error "Aborting. No main variable in $myCONF_FILE set to true. Nothing to do."
  print_info "Specify your configuration in $myCONF_FILE and run script again."
  echo
  exit
fi
sleep 2.5


######################
# Validate variables #
######################

#todo


###################
# Search Exploits #
###################

if [ "$SEARCHEXPLOIT" ]; then
  print_banner "Search Exploits ..."
  source ./parts/search-exploit.sh
  sleep 1
fi


###############
# Brute Force #
###############

if [ "$BRUTEFORCE" ]; then 
  print_banner "Brute Force Passwords ..."
  if [ "$PORT" != "" ]; then
    if [ "$USERNAME" != "" ]; then
      source ./parts/brute-force.sh
      sleep 1

    elif [ "$USERNAME" == "" ]; then
      print_attention "Attention! No username set in $myCONF_FILE"
      sleep 3
      source ./parts/brute-force.sh
    fi
  else
    print_error "No port set in \"$myCONF_FILE\". Brute Force is not executed."
  fi
fi


##############
# Next Steps #
##############
  
print_banner "Next Steps To Do ..."

if [ -s "$myEXPLOITFILE" ]; then
  print_step "Search the $BYELLOW\"$myEXPLOITFILE\"$NC file for a suitable exploit and apply it."
  print_step "For more information check the path on the right side given in the $BYELLOW\"$myEXPLOITFILE\"$NC file."
  print_step "In case it's a metasploit exploit (marked with (Metasploit)), try metasploit search (checkout ${BYELLOW}README.md$NC for more information)."
fi

if [ "$BRUTEFORCE" ] && [ -s "$myPWFILE" ]; then
  print_step "Search the directory $BYELLOW\"$myPWFILE\"$NC for possible passwords and apply it."
fi

print_step "If you where lucky enough to detect a remote code execution vulnerability on the target system, checkout the ${BYELLOW}README.md$NC file for possible reverse shells or command injection attacks."
echo